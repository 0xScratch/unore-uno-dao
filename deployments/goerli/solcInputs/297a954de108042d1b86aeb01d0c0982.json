{
  "language": "Solidity",
  "sources": {
    "contracts/apps/VeUnoDaoYieldDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0;\r\n\r\n// Originally inspired by Synthetix.io, but heavily modified by the UNO team\r\n// https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol\r\n\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../interfaces/dao/IVotingEscrow.sol\";\r\nimport \"../libraries/TransferHelper.sol\";\r\n\r\ncontract VeUnoDaoYieldDistributor is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n    using SafeERC20 for ERC20;\r\n\r\n    /* ========== STATE VARIABLES ========== */\r\n\r\n    // Instances\r\n    IVotingEscrow private veUNO;\r\n    ERC20 public emittedToken;\r\n\r\n    // Addresses\r\n    address public emitted_token_address;\r\n\r\n    // Admin addresses\r\n    address public timelock_address;\r\n\r\n    // Constant for price precision\r\n    uint256 private constant PRICE_PRECISION = 1e6;\r\n\r\n    // Yield and period related\r\n    uint256 public periodFinish;\r\n    uint256 public lastUpdateTime;\r\n    uint256 public yieldRate;\r\n    uint256 public yieldDuration = 604800; // 7 * 86400  (7 days)\r\n    mapping(address => bool) public reward_notifiers;\r\n\r\n    // Yield tracking\r\n    uint256 public yieldPerVeUNOStored = 0;\r\n    mapping(address => uint256) public userYieldPerTokenPaid;\r\n    mapping(address => uint256) public yields;\r\n\r\n    // veUNO tracking\r\n    uint256 public totalVeUNOParticipating = 0;\r\n    uint256 public totalVeUNOSupplyStored = 0;\r\n    mapping(address => bool) public userIsInitialized;\r\n    mapping(address => uint256) public userVeUNOCheckpointed;\r\n    mapping(address => uint256) public userVeUNOEndpointCheckpointed;\r\n    mapping(address => uint256) private lastRewardClaimTime; // staker addr -> timestamp\r\n\r\n    // Greylists\r\n    mapping(address => bool) public greylist;\r\n\r\n    // Admin booleans for emergencies\r\n    bool public yieldCollectionPaused = false; // For emergencies\r\n\r\n    struct LockedBalance {\r\n        int128 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier onlyByOwnGov() {\r\n        require(msg.sender == owner() || msg.sender == timelock_address, \"Not owner or timelock\");\r\n        _;\r\n    }\r\n\r\n    modifier notYieldCollectionPaused() {\r\n        require(yieldCollectionPaused == false, \"Yield collection is paused\");\r\n        _;\r\n    }\r\n\r\n    modifier checkpointUser(address account) {\r\n        _checkpointUser(account);\r\n        _;\r\n    }\r\n\r\n    /* ========== CONSTRUCTOR ========== */\r\n\r\n    constructor (\r\n        address _emittedToken,\r\n        address _timelock_address,\r\n        address _veUNO_address\r\n    ) {\r\n        emitted_token_address = _emittedToken;\r\n        emittedToken = ERC20(_emittedToken);\r\n\r\n        veUNO = IVotingEscrow(_veUNO_address);\r\n        lastUpdateTime = block.timestamp;\r\n        timelock_address = _timelock_address;\r\n\r\n        reward_notifiers[msg.sender] = true;\r\n    }\r\n\r\n    /* ========== VIEWS ========== */\r\n\r\n    function fractionParticipating() external view returns (uint256) {\r\n        return totalVeUNOParticipating.mul(PRICE_PRECISION).div(totalVeUNOSupplyStored);\r\n    }\r\n\r\n    // Only positions with locked veUNO can accrue yield. Otherwise, expired-locked veUNO\r\n    function eligibleCurrentVeUNO(address account) public view returns (uint256 eligible_veuno_bal, uint256 stored_ending_timestamp) {\r\n        uint256 curr_veuno_bal = veUNO.balanceOf(account);\r\n        \r\n        // Stored is used to prevent abuse\r\n        stored_ending_timestamp = userVeUNOEndpointCheckpointed[account];\r\n\r\n        // Only unexpired veUNO should be eligible\r\n        if (stored_ending_timestamp != 0 && (block.timestamp >= stored_ending_timestamp)){\r\n            eligible_veuno_bal = 0;\r\n        }\r\n        else if (block.timestamp >= stored_ending_timestamp){\r\n            eligible_veuno_bal = 0;\r\n        }\r\n        else {\r\n            eligible_veuno_bal = curr_veuno_bal;\r\n        }\r\n    }\r\n\r\n    function lastTimeYieldApplicable() public view returns (uint256) {\r\n        return Math.min(block.timestamp, periodFinish);\r\n    }\r\n\r\n    function yieldPerVeUNO() public view returns (uint256) {\r\n        if (totalVeUNOSupplyStored == 0) {\r\n            return yieldPerVeUNOStored;\r\n        } else {\r\n            return (\r\n                yieldPerVeUNOStored.add(\r\n                    lastTimeYieldApplicable()\r\n                        .sub(lastUpdateTime)\r\n                        .mul(yieldRate)\r\n                        .mul(1e18)\r\n                        .div(totalVeUNOSupplyStored)\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        // Uninitialized users should not earn anything yet\r\n        if (!userIsInitialized[account]) return 0;\r\n\r\n        // Get eligible veUNO balances\r\n        (uint256 eligible_current_veuno, uint256 ending_timestamp) = eligibleCurrentVeUNO(account);\r\n\r\n        // If your veUNO is unlocked\r\n        uint256 eligible_time_fraction = PRICE_PRECISION;\r\n        if (eligible_current_veuno == 0){\r\n            // And you already claimed after expiration\r\n            if (lastRewardClaimTime[account] >= ending_timestamp) {\r\n                // You get NOTHING. You LOSE. Good DAY ser!\r\n                return 0;\r\n            }\r\n            // You haven't claimed yet\r\n            else {\r\n                uint256 eligible_time = (ending_timestamp).sub(lastRewardClaimTime[account]);\r\n                uint256 total_time = (block.timestamp).sub(lastRewardClaimTime[account]);\r\n                eligible_time_fraction = PRICE_PRECISION.mul(eligible_time).div(total_time);\r\n            }\r\n        }\r\n\r\n        // If the amount of veUNO increased, only pay off based on the old balance\r\n        // Otherwise, take the midpoint\r\n        uint256 veuno_balance_to_use;\r\n        {\r\n            uint256 old_veuno_balance = userVeUNOCheckpointed[account];\r\n            if (eligible_current_veuno > old_veuno_balance){\r\n                veuno_balance_to_use = old_veuno_balance;\r\n            }\r\n            else {\r\n                veuno_balance_to_use = ((eligible_current_veuno).add(old_veuno_balance)).div(2); \r\n            }\r\n        }\r\n\r\n        return (\r\n            veuno_balance_to_use\r\n                .mul(yieldPerVeUNO().sub(userYieldPerTokenPaid[account]))\r\n                .mul(eligible_time_fraction)\r\n                .div(1e18 * PRICE_PRECISION)\r\n                .add(yields[account])\r\n        );\r\n    }\r\n\r\n    function getYieldForDuration() external view returns (uint256) {\r\n        return (yieldRate.mul(yieldDuration));\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n\r\n    function _checkpointUser(address account) internal {\r\n        // Need to retro-adjust some things if the period hasn't been renewed, then start a new one\r\n        sync();\r\n\r\n        // Calculate the earnings first\r\n        _syncEarned(account);\r\n\r\n        // Get the old and the new veUNO balances\r\n        uint256 old_veuno_balance = userVeUNOCheckpointed[account];\r\n        uint256 new_veuno_balance = veUNO.balanceOf(account);\r\n\r\n        // Update the user's stored veUNO balance\r\n        userVeUNOCheckpointed[account] = new_veuno_balance;\r\n\r\n        // Update the user's stored ending timestamp\r\n        IVotingEscrow.LockedBalance memory curr_locked_bal_pack = veUNO.locked(account);\r\n        userVeUNOEndpointCheckpointed[account] = curr_locked_bal_pack.end;\r\n\r\n        // Update the total amount participating\r\n        if (new_veuno_balance >= old_veuno_balance) {\r\n            uint256 weight_diff = new_veuno_balance.sub(old_veuno_balance);\r\n            totalVeUNOParticipating = totalVeUNOParticipating.add(weight_diff);\r\n        } else {\r\n            uint256 weight_diff = old_veuno_balance.sub(new_veuno_balance);\r\n            totalVeUNOParticipating = totalVeUNOParticipating.sub(weight_diff);\r\n        }\r\n\r\n        // Mark the user as initialized\r\n        if (!userIsInitialized[account]) {\r\n            userIsInitialized[account] = true;\r\n            lastRewardClaimTime[account] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _syncEarned(address account) internal {\r\n        if (account != address(0)) {\r\n            uint256 earned0 = earned(account);\r\n            yields[account] = earned0;\r\n            userYieldPerTokenPaid[account] = yieldPerVeUNOStored;\r\n        }\r\n    }\r\n\r\n    // Anyone can checkpoint another user\r\n    function checkpointOtherUser(address user_addr) external {\r\n        _checkpointUser(user_addr);\r\n    }\r\n\r\n    // Checkpoints the user\r\n    function checkpoint() external {\r\n        _checkpointUser(msg.sender);\r\n    }\r\n\r\n    function getYield() external nonReentrant notYieldCollectionPaused checkpointUser(msg.sender) returns (uint256 yield0) {\r\n        require(greylist[msg.sender] == false, \"Address has been greylisted\");\r\n\r\n        yield0 = yields[msg.sender];\r\n\r\n        if (yield0 > 0) {\r\n            yields[msg.sender] = 0;\r\n            TransferHelper.safeTransfer(\r\n                emitted_token_address,\r\n                msg.sender,\r\n                yield0\r\n            );\r\n            emit YieldCollected(msg.sender, yield0, emitted_token_address);\r\n        }\r\n\r\n        lastRewardClaimTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n\r\n    function sync() public {\r\n        // Update the total veUNO supply\r\n        yieldPerVeUNOStored = yieldPerVeUNO();\r\n        totalVeUNOSupplyStored = veUNO.totalSupply();\r\n        lastUpdateTime = lastTimeYieldApplicable();\r\n    }\r\n\r\n    function notifyRewardAmount(uint256 amount) external {\r\n        // Only whitelisted addresses can notify rewards\r\n        require(reward_notifiers[msg.sender], \"Sender not whitelisted\");\r\n\r\n        // Handle the transfer of emission tokens via `transferFrom` to reduce the number\r\n        // of transactions required and ensure correctness of the smission amount\r\n        emittedToken.safeTransferFrom(msg.sender, address(this), amount);\r\n\r\n        // Update some values beforehand\r\n        sync();\r\n\r\n        // Update the new yieldRate\r\n        if (block.timestamp >= periodFinish) {\r\n            yieldRate = amount.div(yieldDuration);\r\n        } else {\r\n            uint256 remaining = periodFinish.sub(block.timestamp);\r\n            uint256 leftover = remaining.mul(yieldRate);\r\n            yieldRate = amount.add(leftover).div(yieldDuration);\r\n        }\r\n        \r\n        // Update duration-related info\r\n        lastUpdateTime = block.timestamp;\r\n        periodFinish = block.timestamp.add(yieldDuration);\r\n\r\n        emit RewardAdded(amount, yieldRate);\r\n    }\r\n\r\n    /* ========== RESTRICTED FUNCTIONS ========== */\r\n\r\n    // Added to support recovering LP Yield and other mistaken tokens from other systems to be distributed to holders\r\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external onlyByOwnGov {\r\n        // Only the owner address can ever receive the recovery withdrawal\r\n        TransferHelper.safeTransfer(tokenAddress, owner(), tokenAmount);\r\n        emit RecoveredERC20(tokenAddress, tokenAmount);\r\n    }\r\n\r\n    function setYieldDuration(uint256 _yieldDuration) external onlyByOwnGov {\r\n        require(periodFinish == 0 || block.timestamp > periodFinish, \"Previous yield period must be complete before changing the duration for the new period\");\r\n        yieldDuration = _yieldDuration;\r\n        emit YieldDurationUpdated(yieldDuration);\r\n    }\r\n\r\n    function greylistAddress(address _address) external onlyByOwnGov {\r\n        greylist[_address] = !(greylist[_address]);\r\n    }\r\n\r\n    function toggleRewardNotifier(address notifier_addr) external onlyByOwnGov {\r\n        reward_notifiers[notifier_addr] = !reward_notifiers[notifier_addr];\r\n    }\r\n\r\n    function setPauses(bool _yieldCollectionPaused) external onlyByOwnGov {\r\n        yieldCollectionPaused = _yieldCollectionPaused;\r\n    }\r\n\r\n    function setYieldRate(uint256 _new_rate0, bool sync_too) external onlyByOwnGov {\r\n        yieldRate = _new_rate0;\r\n\r\n        if (sync_too) {\r\n            sync();\r\n        }\r\n    }\r\n\r\n    function setPeriodFinish(uint256 newPeriod, bool sync_too) external onlyByOwnGov {\r\n        periodFinish = newPeriod;\r\n\r\n        if (sync_too) {\r\n            sync();\r\n        }\r\n    }\r\n\r\n    function setTimelock(address _new_timelock) external onlyByOwnGov {\r\n        timelock_address = _new_timelock;\r\n    }\r\n\r\n    function withdrawUNO(address to) external onlyByOwnGov {\r\n        TransferHelper.safeTransfer(emitted_token_address, to, IERC20(emitted_token_address).balanceOf(address(this)));\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    event RewardAdded(uint256 reward, uint256 yieldRate);\r\n    event OldYieldCollected(address indexed user, uint256 yieldAmount, address token_address);\r\n    event YieldCollected(address indexed user, uint256 yieldAmount, address token_address);\r\n    event YieldDurationUpdated(uint256 newDuration);\r\n    event RecoveredERC20(address token, uint256 amount);\r\n    event YieldPeriodRenewed(address token, uint256 yieldRate);\r\n    event DefaultInitialization();\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/dao/IVotingEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface IVotingEscrow {\r\n    struct LockedBalance {\r\n        int256 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    function get_last_user_slope(address _addr) external view returns (uint256);\r\n\r\n    function locked__end(address _addr) external view returns (uint256);\r\n\r\n    // function balanceOf(address _addr, uint256 _t) external view returns (uint256);\r\n    function balanceOf(address addr)external view returns (uint256);\r\n\r\n    // function totalSupply(uint256 _t) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function locked (address arg0) external view returns ( LockedBalance memory );\r\n\r\n    function get_user_point_epoch(address _user)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function user_point_history__ts(address _addr, uint256 _idx)\r\n        external\r\n        view\r\n        returns (uint256);\r\n}\r\n"
    },
    "contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.11;\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\r\n    }\r\n\r\n    function safeTransfer(address token, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\r\n    }\r\n\r\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\r\n    }\r\n\r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/mocks/MockUno.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\r\n\r\npragma solidity 0.8.10;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract MockUno is Ownable, ERC20 {\r\n    uint256 INITIAL_SUPPLY = 10000000000 * 10**18;\r\n\r\n    constructor(string memory _name_, string memory _symbol_) ERC20(_name_, _symbol_) {}\r\n\r\n    function faucet(uint256 _amount) external {\r\n        _mint(msg.sender, _amount);\r\n    }\r\n}\r\n"
    },
    "contracts/VotingEscrow.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\n/***\r\n *@title VotingEscrow\r\n *@notice Votes have a weight depending on time, so that users are\r\n *        committed to the future of (whatever they are voting for)\r\n *@dev Vote weight decays linearly over time. Lock time cannot be\r\n *     more than `MAXTIME` (4 years).\r\n */\r\n\r\n// Voting escrow to have time-weighted votes\r\n// Votes have a weight depending on time, so that users are committed\r\n// to the future of (whatever they are voting for).\r\n// The weight in this implementation is linear, and lock cannot be more than maxtime\r\n// w ^\r\n// 1 +        /\r\n//   |      /\r\n//   |    /\r\n//   |  /\r\n//   |/\r\n// 0 +--------+------> time\r\n//       maxtime (4 years?)\r\n\r\n// Interface for checking whether address belongs to a whitelisted\r\n// type of a smart wallet.\r\n// When new types are added - the whole contract is changed\r\n// The check() method is modifying to be able to use caching\r\n// for individual wallet addresses\r\nimport \"./interfaces/dao/ISmartWalletChecker.sol\";\r\n\r\nimport \"./interfaces/pool/IOwnership.sol\";\r\n\r\n//libraries\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\r\n\r\ncontract VotingEscrow is ReentrancyGuard {\r\n    struct Point {\r\n        int256 bias;\r\n        int256 slope; // - dweight / dt\r\n        uint256 ts; //timestamp\r\n        uint256 blk; // block\r\n    }\r\n    // We cannot really do block numbers per se b/c slope is per time, not per block\r\n    // and per block could be fairly bad b/c Ethereum changes blocktimes.\r\n    // What we can do is to extrapolate ***At functions\r\n\r\n    struct LockedBalance {\r\n        int256 amount;\r\n        uint256 end;\r\n    }\r\n\r\n    int256 constant DEPOSIT_FOR_TYPE = 0;\r\n    int256 constant CREATE_LOCK_TYPE = 1;\r\n    int256 constant INCREASE_LOCK_AMOUNT = 2;\r\n    int256 constant INCREASE_UNLOCK_TIME = 3;\r\n\r\n    event Deposit(\r\n        address indexed provider,\r\n        uint256 value,\r\n        uint256 indexed locktime,\r\n        int256 _type,\r\n        uint256 ts\r\n    );\r\n    event Withdraw(address indexed provider, uint256 value, uint256 ts);\r\n    event ForceUnlock(address target, uint256 value, uint256 ts);\r\n\r\n    event Supply(uint256 prevSupply, uint256 supply);\r\n\r\n    event commitWallet(address newSmartWalletChecker);\r\n    event applyWallet(address newSmartWalletChecker);\r\n\r\n    uint256 constant WEEK = 7 * 86400; // all future times are rounded by week\r\n    uint256 constant MAXTIME = 4 * 365 * 86400; // 4 years\r\n    uint256 constant MULTIPLIER = 10**18;\r\n\r\n    address public token;\r\n    uint256 public supply;\r\n\r\n    mapping(address => LockedBalance) public locked;\r\n\r\n    //everytime user deposit/withdraw/change_locktime, these values will be updated;\r\n    uint256 public epoch;\r\n    Point[100000000000000000000000000000] public point_history; // epoch -> unsigned point.\r\n    mapping(address => Point[1000000000]) public user_point_history; // user -> Point[user_epoch]\r\n    mapping(address => uint256) public user_point_epoch;\r\n    mapping(uint256 => int256) public slope_changes; // time -> signed slope change\r\n\r\n    // Aragon's view methods for compatibility\r\n    address public controller;\r\n    bool public transfersEnabled;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    string public version;\r\n    uint256 public constant decimals = 18;\r\n\r\n    // Checker for whitelisted (smart contract) wallets which are allowed to deposit\r\n    // The goal is to prevent tokenizing the escrow\r\n    address public future_smart_wallet_checker;\r\n    address public smart_wallet_checker;\r\n\r\n    IOwnership public immutable ownership;\r\n\r\n    modifier onlyOwner() {\r\n        require(\r\n            ownership.owner() == msg.sender,\r\n            \"Caller is not allowed to operate\"\r\n        );\r\n        _;\r\n    }\r\n\r\n    /***\r\n     *@notice Contract constructor\r\n     *@param token_addr `UNO` token address\r\n     *@param _name Token name\r\n     *@param _symbol Token symbol\r\n     *@param _version Contract version - required for Aragon compatibility\r\n     */\r\n    constructor(\r\n        address _token_addr,\r\n        string memory _name,\r\n        string memory _symbol,\r\n        string memory _version,\r\n        address _ownership\r\n    ) {\r\n        ownership = IOwnership(_ownership);\r\n        token = _token_addr;\r\n        point_history[0].blk = block.number;\r\n        point_history[0].ts = block.timestamp;\r\n        controller = msg.sender;\r\n        transfersEnabled = true;\r\n\r\n        name = _name;\r\n        symbol = _symbol;\r\n        version = _version;\r\n    }\r\n\r\n    /***\r\n     *@notice Check if the call is from a whitelisted smart contract, revert if not\r\n     *@param _addr Address to be checked\r\n     */\r\n    function assert_not_contract(address _addr) internal {\r\n        if (_addr != tx.origin) {\r\n            address checker = smart_wallet_checker; //not going to be deployed at the moment of launch.\r\n            if (checker != address(0)) {\r\n                if (ISmartWalletChecker(checker).check(_addr)) {\r\n                    return;\r\n                }\r\n            }\r\n            revert(\"contract depositors not allowed\");\r\n        }\r\n    }\r\n\r\n    /***\r\n     *@notice Get the most recently recorded rate of voting power decrease for `_addr`\r\n     *@param _addr Address of the user wallet\r\n     *@return Value of the slope\r\n     */\r\n    function get_last_user_slope(address _addr)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        uint256 uepoch = user_point_epoch[_addr];\r\n        return uint256(user_point_history[_addr][uepoch].slope);\r\n    }\r\n\r\n    /***\r\n     *@notice Get the timestamp for checkpoint `_idx` for `_addr`\r\n     *@param _addr User wallet address\r\n     *@param _idx User epoch number\r\n     *@return Epoch time of the checkpoint\r\n     */\r\n    function user_point_history__ts(address _addr, uint256 _idx)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return user_point_history[_addr][_idx].ts;\r\n    }\r\n\r\n    /***\r\n     *@notice Get timestamp when `_addr`'s lock finishes\r\n     *@param _addr User wallet\r\n     *@return Epoch time of the lock end\r\n     */\r\n    function locked__end(address _addr) external view returns (uint256) {\r\n        return locked[_addr].end;\r\n    }\r\n\r\n    /***\r\n     *@notice Record global and per-user data to checkpoint\r\n     *@param _addr User's wallet address. No user checkpoint if 0x0\r\n     *@param _old_locked Pevious locked amount / end lock time for the user\r\n     *@param _new_locked New locked amount / end lock time for the user\r\n     */\r\n    function _checkpoint(\r\n        address _addr,\r\n        LockedBalance memory _old_locked,\r\n        LockedBalance memory _new_locked\r\n    ) internal {\r\n        Point memory _u_old;\r\n        Point memory _u_new;\r\n        int256 _old_dslope = 0;\r\n        int256 _new_dslope = 0;\r\n        uint256 _epoch = epoch;\r\n\r\n        if (_addr != address(0)) {\r\n            // Calculate slopes and biases\r\n            // Kept at zero when they have to\r\n            if (_old_locked.end > block.timestamp && _old_locked.amount > 0) {\r\n                unchecked {\r\n                    _u_old.slope = _old_locked.amount / int256(MAXTIME);\r\n                }\r\n                _u_old.bias =\r\n                    _u_old.slope *\r\n                    int256(_old_locked.end - block.timestamp);\r\n            }\r\n            if (_new_locked.end > block.timestamp && _new_locked.amount > 0) {\r\n                unchecked {\r\n                    _u_new.slope = _new_locked.amount / int256(MAXTIME);\r\n                }\r\n                _u_new.bias =\r\n                    _u_new.slope *\r\n                    int256(_new_locked.end - block.timestamp);\r\n            }\r\n\r\n            // Read values of scheduled changes in the slope\r\n            // _old_locked.end can be in the past and in the future\r\n            // _new_locked.end can ONLY by in the FUTURE unless everything expired than zeros\r\n            _old_dslope = slope_changes[_old_locked.end];\r\n            if (_new_locked.end != 0) {\r\n                if (_new_locked.end == _old_locked.end) {\r\n                    _new_dslope = _old_dslope;\r\n                } else {\r\n                    _new_dslope = slope_changes[_new_locked.end];\r\n                }\r\n            }\r\n        }\r\n        Point memory _last_point = Point({\r\n            bias: 0,\r\n            slope: 0,\r\n            ts: block.timestamp,\r\n            blk: block.number\r\n        });\r\n        if (_epoch > 0) {\r\n            _last_point = point_history[_epoch];\r\n        }\r\n        uint256 _last_checkpoint = _last_point.ts;\r\n        // _initial_last_point is used for extrapolation to calculate block number\r\n        // (approximately, for *At methods) and save them\r\n        // as we cannot figure that out exactly from inside the contract\r\n        Point memory _initial_last_point = _last_point;\r\n        uint256 _block_slope = 0; // dblock/dt\r\n        if (block.timestamp > _last_point.ts) {\r\n            _block_slope =\r\n                (MULTIPLIER * (block.number - _last_point.blk)) /\r\n                (block.timestamp - _last_point.ts);\r\n        }\r\n        // If last point is already recorded in this block, slope=0\r\n        // But that's ok b/c we know the block in such case\r\n\r\n        // Go over weeks to fill history and calculate what the current point is\r\n        uint256 _t_i;\r\n        unchecked {\r\n            _t_i = (_last_checkpoint / WEEK) * WEEK;\r\n        }\r\n        for (uint256 i; i < 255; ) {\r\n            // Hopefully it won't happen that this won't get used in 5 years!\r\n            // If it does, users will be able to withdraw but vote weight will be broken\r\n            _t_i += WEEK;\r\n            int256 d_slope = 0;\r\n            if (_t_i > block.timestamp) {\r\n                _t_i = block.timestamp;\r\n            } else {\r\n                d_slope = slope_changes[_t_i];\r\n            }\r\n            _last_point.bias =\r\n                _last_point.bias -\r\n                _last_point.slope *\r\n                int256(_t_i - _last_checkpoint);\r\n            _last_point.slope += d_slope;\r\n            if (_last_point.bias < 0) {\r\n                // This can happen\r\n                _last_point.bias = 0;\r\n            }\r\n            if (_last_point.slope < 0) {\r\n                // This cannot happen - just in case\r\n                _last_point.slope = 0;\r\n            }\r\n            _last_checkpoint = _t_i;\r\n            _last_point.ts = _t_i;\r\n            _last_point.blk =\r\n                _initial_last_point.blk +\r\n                ((_block_slope * (_t_i - _initial_last_point.ts)) / MULTIPLIER);\r\n            _epoch += 1;\r\n            if (_t_i == block.timestamp) {\r\n                _last_point.blk = block.number;\r\n                break;\r\n            } else {\r\n                point_history[_epoch] = _last_point;\r\n            }\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        epoch = _epoch;\r\n        // Now point_history is filled until t=now\r\n\r\n        if (_addr != address(0)) {\r\n            // If last point was in this block, the slope change has been applied already\r\n            // But in such case we have 0 slope(s)\r\n            _last_point.slope += _u_new.slope - _u_old.slope;\r\n            _last_point.bias += _u_new.bias - _u_old.bias;\r\n            if (_last_point.slope < 0) {\r\n                _last_point.slope = 0;\r\n            }\r\n            if (_last_point.bias < 0) {\r\n                _last_point.bias = 0;\r\n            }\r\n        }\r\n        // Record the changed point into history\r\n        point_history[_epoch] = _last_point;\r\n\r\n        address _addr2 = _addr; //To avoid being \"Stack Too Deep\"\r\n\r\n        if (_addr2 != address(0)) {\r\n            // Schedule the slope changes (slope is going down)\r\n            // We subtract new_user_slope from [_new_locked.end]\r\n            // and add old_user_slope to [_old_locked.end]\r\n            if (_old_locked.end > block.timestamp) {\r\n                // _old_dslope was <something> - _u_old.slope, so we cancel that\r\n                _old_dslope += _u_old.slope;\r\n                if (_new_locked.end == _old_locked.end) {\r\n                    _old_dslope -= _u_new.slope; // It was a new deposit, not extension\r\n                }\r\n                slope_changes[_old_locked.end] = _old_dslope;\r\n            }\r\n            if (_new_locked.end > block.timestamp) {\r\n                if (_new_locked.end > _old_locked.end) {\r\n                    _new_dslope -= _u_new.slope; // old slope disappeared at this point\r\n                    slope_changes[_new_locked.end] = _new_dslope;\r\n                }\r\n                // else we recorded it already in _old_dslope\r\n            }\r\n\r\n            // Now handle user history\r\n            uint256 _user_epoch;\r\n            unchecked {\r\n                _user_epoch = user_point_epoch[_addr2] + 1;\r\n            }\r\n\r\n            user_point_epoch[_addr2] = _user_epoch;\r\n            _u_new.ts = block.timestamp;\r\n            _u_new.blk = block.number;\r\n            user_point_history[_addr2][_user_epoch] = _u_new;\r\n        }\r\n    }\r\n\r\n    /***\r\n     *@notice Deposit and lock tokens for a user\r\n     *@param _depositor Spender's wallet address\r\n     *@param _beneficiary Beneficiary's wallet address\r\n     *@param _value Amount to deposit\r\n     *@param _unlock_time New time when to unlock the tokens, or 0 if unchanged\r\n     *@param _locked_balance Previous locked amount / timestamp\r\n     */\r\n    function _deposit_for(\r\n        address _depositor,\r\n        address _beneficiary,\r\n        uint256 _value,\r\n        uint256 _unlock_time,\r\n        LockedBalance memory _locked_balance,\r\n        int256 _type\r\n    ) internal {\r\n        LockedBalance memory _locked = LockedBalance(\r\n            _locked_balance.amount,\r\n            _locked_balance.end\r\n        );\r\n        LockedBalance memory _old_locked = LockedBalance(\r\n            _locked_balance.amount,\r\n            _locked_balance.end\r\n        );\r\n\r\n        uint256 _supply_before = supply;\r\n        supply = _supply_before + _value;\r\n        //Adding to existing lock, or if a lock is expired - creating a new one\r\n        _locked.amount = _locked.amount + int256(_value);\r\n        if (_unlock_time != 0) {\r\n            _locked.end = _unlock_time;\r\n        }\r\n        locked[_beneficiary] = _locked;\r\n\r\n        // Possibilities\r\n        // Both _old_locked.end could be current or expired (>/< block.timestamp)\r\n        // value == 0 (extend lock) or value > 0 (add to lock or extend lock)\r\n        // _locked.end > block.timestamp (always)\r\n\r\n        _checkpoint(_beneficiary, _old_locked, _locked);\r\n\r\n        if (_value != 0) {\r\n            require(\r\n                IERC20(token).transferFrom(_depositor, address(this), _value)\r\n            );\r\n        }\r\n\r\n        emit Deposit(_beneficiary, _value, _locked.end, _type, block.timestamp);\r\n        emit Supply(_supply_before, _supply_before + _value);\r\n    }\r\n\r\n    function checkpoint() public {\r\n        /***\r\n         *@notice Record global data to checkpoint\r\n         */\r\n        LockedBalance memory _a;\r\n        LockedBalance memory _b;\r\n        _checkpoint(address(0), _a, _b);\r\n    }\r\n\r\n    /***\r\n     *@notice Deposit `_value` tokens for `_addr` and add to the lock\r\n     *@dev Anyone (even a smart contract) can deposit for someone else, but\r\n     *    cannot extend their locktime and deposit for a brand new user\r\n     *@param _addr User's wallet address\r\n     *@param _value Amount to add to user's lock\r\n     */\r\n    function deposit_for(address _addr, uint256 _value) external nonReentrant {\r\n        require(_value > 0, \"dev: need non-zero value\");\r\n        LockedBalance memory _locked = locked[_addr];\r\n\r\n        require(_locked.amount > 0, \"No existing lock found\");\r\n        require(_locked.end > block.timestamp, \"Cannot add to expired lock.\");\r\n\r\n        _deposit_for(msg.sender, _addr, _value, 0, _locked, DEPOSIT_FOR_TYPE);\r\n    }\r\n\r\n    /***\r\n     *@notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\r\n     *@param _value Amount to deposit\r\n     *@param _unlock_time Epoch time period when tokens unlock, rounded down to whole weeks\r\n     */\r\n    function create_lock(uint256 _value, uint256 _unlock_time)\r\n        external\r\n        nonReentrant\r\n    {\r\n        assert_not_contract(msg.sender);\r\n        require(\r\n            _unlock_time > 0 && _unlock_time <= MAXTIME,\r\n            \"Can lock until time in future or Voting lock can be 4 years max\"\r\n        );\r\n        _unlock_time = block.timestamp + (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\r\n        LockedBalance memory _locked = locked[msg.sender];\r\n\r\n        require(_value > 0, \"dev: need non-zero value\");\r\n        require(_locked.amount == 0, \"Withdraw old tokens first\");\r\n\r\n        _deposit_for(\r\n            msg.sender,\r\n            msg.sender,\r\n            _value,\r\n            _unlock_time,\r\n            _locked,\r\n            CREATE_LOCK_TYPE\r\n        );\r\n    }\r\n\r\n    /***\r\n     *@notice Deposit `_value` additional tokens for `msg.sender`\r\n     *        without modifying the unlock time\r\n     *@param _value Amount of tokens to deposit and add to the lock\r\n     */\r\n    function increase_amount(uint256 _value) external nonReentrant {\r\n        assert_not_contract(msg.sender);\r\n        LockedBalance memory _locked = locked[msg.sender];\r\n\r\n        require(_value > 0, \"dev: need non-zero value\");\r\n        require(_locked.amount > 0, \"No existing lock found\");\r\n        require(_locked.end > block.timestamp, \"Cannot add to expired lock.\");\r\n\r\n        _deposit_for(\r\n            msg.sender,\r\n            msg.sender,\r\n            _value,\r\n            0,\r\n            _locked,\r\n            INCREASE_LOCK_AMOUNT\r\n        );\r\n    }\r\n\r\n    /***\r\n     *@notice Extend the unlock time for `msg.sender` to `_unlock_time`\r\n     *@param _unlock_time New epoch time for unlocking\r\n     */\r\n    function increase_unlock_time(uint256 _unlock_time) external nonReentrant {\r\n        assert_not_contract(msg.sender); //@shun: need to convert to solidity\r\n        LockedBalance memory _locked = locked[msg.sender];\r\n\r\n        require(_locked.end > block.timestamp, \"Lock expired\");\r\n        require(_locked.amount > 0, \"Nothing is locked\");\r\n\r\n        require(\r\n            _unlock_time > 0 && _unlock_time <= MAXTIME,\r\n            \"Can only increase lock duration or Voting lock can be 4 years max\"\r\n        );\r\n        unchecked {\r\n            _unlock_time = block.timestamp + (_unlock_time / WEEK) * WEEK; // Locktime is rounded down to weeks\r\n        }\r\n\r\n        _deposit_for(\r\n            msg.sender,\r\n            msg.sender,\r\n            0,\r\n            _unlock_time,\r\n            _locked,\r\n            INCREASE_UNLOCK_TIME\r\n        );\r\n    }\r\n\r\n    /***\r\n     *@notice Withdraw all tokens for `msg.sender`\r\n     *@dev Only possible if the lock has expired\r\n     */\r\n    function withdraw() external nonReentrant {\r\n        LockedBalance memory _locked = LockedBalance(\r\n            locked[msg.sender].amount,\r\n            locked[msg.sender].end\r\n        );\r\n\r\n        require(block.timestamp >= _locked.end, \"The lock didn't expire\");\r\n        uint256 _value = uint256(_locked.amount);\r\n\r\n        LockedBalance memory _old_locked = LockedBalance(\r\n            locked[msg.sender].amount,\r\n            locked[msg.sender].end\r\n        );\r\n\r\n        _locked.end = 0;\r\n        _locked.amount = 0;\r\n        locked[msg.sender] = _locked;\r\n        uint256 _supply_before = supply;\r\n        supply = _supply_before - _value;\r\n\r\n        // _old_locked can have either expired <= timestamp or zero end\r\n        // _locked has only 0 end\r\n        // Both can have >= 0 amount\r\n        _checkpoint(msg.sender, _old_locked, _locked);\r\n\r\n        require(IERC20(token).transfer(msg.sender, _value));\r\n\r\n        emit Withdraw(msg.sender, _value, block.timestamp);\r\n        emit Supply(_supply_before, _supply_before - _value);\r\n    }\r\n\r\n    // The following ERC20/minime-compatible methods are not real balanceOf and supply!\r\n    // They measure the weights for the purpose of voting, so they don't represent\r\n    // real coins.\r\n\r\n    /***\r\n     *@notice Binary search to estimate timestamp for block number\r\n     *@param _block Block to find\r\n     *@param _max_epoch Don't go beyond this epoch\r\n     *@return Approximate timestamp for block\r\n     */\r\n    function find_block_epoch(uint256 _block, uint256 _max_epoch)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Binary search\r\n        uint256 _min = 0;\r\n        uint256 _max = _max_epoch;\r\n        unchecked {\r\n            for (uint256 i; i <= 128; i++) {\r\n                // Will be always enough for 128-bit numbers\r\n                if (_min >= _max) {\r\n                    break;\r\n                }\r\n                uint256 _mid = (_min + _max + 1) / 2;\r\n                if (point_history[_mid].blk <= _block) {\r\n                    _min = _mid;\r\n                } else {\r\n                    _max = _mid - 1;\r\n                }\r\n            }\r\n        }\r\n        return _min;\r\n    }\r\n\r\n    /***\r\n     *@notice Get the current voting power for `msg.sender`\r\n     *@dev Adheres to the ERC20 `balanceOf` interface for Metamask & Snapshot compatibility\r\n     *@param _addr User wallet address\r\n     *@return User's present voting power\r\n     */\r\n    function balanceOf(address _addr) external view returns (uint256) {\r\n        uint256 _t = block.timestamp;\r\n\r\n        uint256 _epoch = user_point_epoch[_addr];\r\n        if (_epoch == 0) {\r\n            return 0;\r\n        } else {\r\n            Point memory _last_point = user_point_history[_addr][_epoch];\r\n            _last_point.bias -= _last_point.slope * int256(_t - _last_point.ts);\r\n            if (_last_point.bias < 0) {\r\n                _last_point.bias = 0;\r\n            }\r\n            return uint256(_last_point.bias);\r\n        }\r\n    }\r\n\r\n    /***\r\n     *@notice Get the current voting power for `msg.sender`\r\n     *@dev Adheres to the ERC20 `balanceOf` interface for Aragon compatibility\r\n     *@param _addr User wallet address\r\n     *@param _t Epoch time to return voting power at\r\n     *@return User voting power\r\n     *@dev return the present voting power if _t is 0\r\n     */\r\n    function balanceOf(address _addr, uint256 _t)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        if (_t == 0) {\r\n            _t = block.timestamp;\r\n        }\r\n\r\n        uint256 _epoch = user_point_epoch[_addr];\r\n        if (_epoch == 0) {\r\n            return 0;\r\n        } else {\r\n            Point memory _last_point = user_point_history[_addr][_epoch];\r\n            _last_point.bias -= _last_point.slope * int256(_t - _last_point.ts);\r\n            if (_last_point.bias < 0) {\r\n                _last_point.bias = 0;\r\n            }\r\n            return uint256(_last_point.bias);\r\n        }\r\n    }\r\n\r\n    //Struct to avoid \"Stack Too Deep\"\r\n    struct Parameters {\r\n        uint256 min;\r\n        uint256 max;\r\n        uint256 max_epoch;\r\n        uint256 d_block;\r\n        uint256 d_t;\r\n    }\r\n\r\n    /***\r\n     *@notice Measure voting power of `_addr` at block height `_block`\r\n     *@dev Adheres to MiniMe `balanceOfAt` interface https//github.com/Giveth/minime\r\n     *@param _addr User's wallet address\r\n     *@param _block Block to calculate the voting power at\r\n     *@return Voting power\r\n     */\r\n    function balanceOfAt(address _addr, uint256 _block)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        // Copying and pasting totalSupply code because Vyper cannot pass by\r\n        // reference yet\r\n        require(_block <= block.number);\r\n\r\n        Parameters memory _st;\r\n\r\n        // Binary search\r\n        _st.min = 0;\r\n        _st.max = user_point_epoch[_addr];\r\n        unchecked {\r\n            for (uint256 i; i <= 128; i++) {\r\n                // Will be always enough for 128-bit numbers\r\n                if (_st.min >= _st.max) {\r\n                    break;\r\n                }\r\n                uint256 _mid = (_st.min + _st.max + 1) / 2;\r\n                if (user_point_history[_addr][_mid].blk <= _block) {\r\n                    _st.min = _mid;\r\n                } else {\r\n                    _st.max = _mid - 1;\r\n                }\r\n            }\r\n        }\r\n\r\n        Point memory _upoint = user_point_history[_addr][_st.min];\r\n\r\n        _st.max_epoch = epoch;\r\n        uint256 _epoch = find_block_epoch(_block, _st.max_epoch);\r\n        Point memory _point_0 = point_history[_epoch];\r\n        _st.d_block = 0;\r\n        _st.d_t = 0;\r\n        if (_epoch < _st.max_epoch) {\r\n            Point memory _point_1 = point_history[_epoch + 1];\r\n            _st.d_block = _point_1.blk - _point_0.blk;\r\n            _st.d_t = _point_1.ts - _point_0.ts;\r\n        } else {\r\n            _st.d_block = block.number - _point_0.blk;\r\n            _st.d_t = block.timestamp - _point_0.ts;\r\n        }\r\n        uint256 block_time = _point_0.ts;\r\n        if (_st.d_block != 0) {\r\n            block_time += (_st.d_t * (_block - _point_0.blk)) / _st.d_block;\r\n        }\r\n\r\n        _upoint.bias -= _upoint.slope * int256(block_time - _upoint.ts);\r\n        if (_upoint.bias >= 0) {\r\n            return uint256(_upoint.bias);\r\n        }\r\n    }\r\n\r\n    /***\r\n     *@notice Calculate total voting power at some point in the past\r\n     *@param point The point (bias/slope) to start search from\r\n     *@param t Time to calculate the total voting power at\r\n     *@return Total voting power at that time\r\n     */\r\n    function supply_at(Point memory point, uint256 t)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Point memory _last_point = point;\r\n        uint256 _t_i;\r\n        unchecked {\r\n            _t_i = (_last_point.ts / WEEK) * WEEK;\r\n        }\r\n        for (uint256 i; i < 255; ) {\r\n            _t_i += WEEK;\r\n            int256 d_slope = 0;\r\n\r\n            if (_t_i > t) {\r\n                _t_i = t;\r\n            } else {\r\n                d_slope = slope_changes[_t_i];\r\n            }\r\n            _last_point.bias -=\r\n                _last_point.slope *\r\n                int256(_t_i - _last_point.ts);\r\n\r\n            if (_t_i == t) {\r\n                break;\r\n            }\r\n            _last_point.slope += d_slope;\r\n            _last_point.ts = _t_i;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (_last_point.bias < 0) {\r\n            _last_point.bias = 0;\r\n        }\r\n        return uint256(_last_point.bias);\r\n    }\r\n\r\n    /***\r\n     *@notice Calculate total voting power\r\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\r\n     *@return Total voting power\r\n     */\r\n\r\n    function totalSupply() external view returns (uint256) {\r\n        uint256 _epoch = epoch;\r\n        Point memory _last_point = point_history[_epoch];\r\n\r\n        return supply_at(_last_point, block.timestamp);\r\n    }\r\n\r\n    /***\r\n     *@notice Calculate total voting power\r\n     *@dev Adheres to the ERC20 `totalSupply` interface for Aragon compatibility\r\n     *@return Total voting power\r\n     */\r\n    function totalSupply(uint256 _t) external view returns (uint256) {\r\n        if (_t == 0) {\r\n            _t = block.timestamp;\r\n        }\r\n\r\n        uint256 _epoch = epoch;\r\n        Point memory _last_point = point_history[_epoch];\r\n\r\n        return supply_at(_last_point, _t);\r\n    }\r\n\r\n    /***\r\n     *@notice Calculate total voting power at some point in the past\r\n     *@param _block Block to calculate the total voting power at\r\n     *@return Total voting power at `_block`\r\n     */\r\n    function totalSupplyAt(uint256 _block) external view returns (uint256) {\r\n        require(_block <= block.number);\r\n        uint256 _epoch = epoch;\r\n        uint256 _target_epoch = find_block_epoch(_block, _epoch);\r\n\r\n        Point memory _point = point_history[_target_epoch];\r\n        uint256 dt = 0;\r\n        if (_target_epoch < _epoch) {\r\n            Point memory _point_next = point_history[_target_epoch + 1];\r\n            if (_point.blk != _point_next.blk) {\r\n                dt =\r\n                    ((_block - _point.blk) * (_point_next.ts - _point.ts)) /\r\n                    (_point_next.blk - _point.blk);\r\n            }\r\n        } else {\r\n            if (_point.blk != block.number) {\r\n                dt =\r\n                    ((_block - _point.blk) * (block.timestamp - _point.ts)) /\r\n                    (block.number - _point.blk);\r\n            }\r\n        }\r\n        // Now dt contains info on how far are we beyond point\r\n\r\n        return supply_at(_point, _point.ts + dt);\r\n    }\r\n\r\n    /***\r\n     *@dev Dummy method required for Aragon compatibility\r\n     */\r\n    function changeController(address _newController) external {\r\n        require(msg.sender == controller);\r\n        controller = _newController;\r\n    }\r\n\r\n    function get_user_point_epoch(address _user)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return user_point_epoch[_user];\r\n    }\r\n\r\n    //---------------------- Admin Only ----------------------//\r\n    /***\r\n     *@notice Set an external contract to check for approved smart contract wallets\r\n     *@param _addr Address of Smart contract checker\r\n     */\r\n    function commit_smart_wallet_checker(address _addr) external onlyOwner {\r\n        future_smart_wallet_checker = _addr;\r\n\r\n        emit commitWallet(_addr);\r\n    }\r\n\r\n    /***\r\n     *@notice Apply setting external contract to check approved smart contract wallets\r\n     */\r\n    function apply_smart_wallet_checker() external onlyOwner {\r\n        address _future_smart_wallet_checker = future_smart_wallet_checker;\r\n        smart_wallet_checker = _future_smart_wallet_checker;\r\n\r\n        emit commitWallet(_future_smart_wallet_checker);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/dao/ISmartWalletChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\ninterface ISmartWalletChecker {\r\n    function check(address _addr) external returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/pool/IOwnership.sol": {
      "content": "pragma solidity 0.8.10;\r\n\r\n//SPDX-License-Identifier: MIT\r\n\r\ninterface IOwnership {\r\n    function owner() external view returns (address);\r\n\r\n    function futureOwner() external view returns (address);\r\n\r\n    function commitTransferOwnership(address newOwner) external;\r\n\r\n    function acceptTransferOwnership() external;\r\n}\r\n"
    },
    "contracts/Ownership.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.10;\r\n\r\nimport \"./interfaces/pool/IOwnership.sol\";\r\n\r\ncontract Ownership is IOwnership {\r\n    address private _owner;\r\n    address private _futureOwner;\r\n\r\n    event CommitNewOwnership(address indexed futureOwner);\r\n    event AcceptNewOwnership(address indexed owner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit AcceptNewOwnership(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() external view override returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function futureOwner() external view override returns (address) {\r\n        return _futureOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Caller is not allowed to operate\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFutureOwner() {\r\n        require(_futureOwner == msg.sender, \"Caller is not allowed to operate\");\r\n        _;\r\n    }\r\n\r\n    /***\r\n     *@notice Transfer ownership of GaugeController to `newOwner`\r\n     *@param newOwner Address to have ownership transferred to\r\n     */\r\n    function commitTransferOwnership(address newOwner)\r\n        external\r\n        override\r\n        onlyOwner\r\n    {\r\n        _futureOwner = newOwner;\r\n        emit CommitNewOwnership(newOwner);\r\n    }\r\n\r\n    /***\r\n     *@notice Accept a transfer of ownership\r\n     */\r\n    function acceptTransferOwnership() external override onlyFutureOwner {\r\n        _owner = msg.sender;\r\n        _futureOwner = address(0);\r\n        emit AcceptNewOwnership(msg.sender);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}